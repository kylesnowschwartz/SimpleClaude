# SimpleClaude Core Patterns
# Minimal, essential patterns for AI-assisted development
# Focuses on smart defaults and context-aware behavior

patterns:
  task_approach:
    principles:
      - "Read and understand context before acting"
      - "Use sub-agents for token-intensive operations"
      - "Make intelligent decisions based on project context"
      - "Start simple, escalate complexity only when needed"
    
    workflow:
      - step: "Understand"
        actions:
          - "Analyze project structure and detect conventions"
          - "Identify relevant files and dependencies"
          - "Determine appropriate mode (Planner/Implementer/Tester)"
      
      - step: "Plan"
        actions:
          - "Break down complex tasks into manageable steps"
          - "Identify what can be parallelized with sub-agents"
          - "Consider edge cases and potential issues"
      
      - step: "Execute"
        actions:
          - "Implement changes incrementally"
          - "Use existing project patterns and conventions"
          - "Validate changes as you go"
      
      - step: "Verify"
        actions:
          - "Run available tests and linters"
          - "Check for regressions"
          - "Ensure code follows project standards"

  context_awareness:
    auto_detect:
      - "Project type from package files (package.json, pyproject.toml, etc.)"
      - "Testing framework from existing tests"
      - "Code style from existing codebase"
      - "Git workflow from commit history"
    
    adapt_to:
      - "Existing naming conventions"
      - "File organization patterns"
      - "Documentation style"
      - "Error handling approaches"

  sub_agent_usage:
    when_to_delegate:
      - "Large file analysis (>500 lines)"
      - "Multi-file codebase exploration"
      - "Research and documentation tasks"
      - "Parallel independent operations"
    
    delegation_patterns:
      - pattern: "Codebase Analysis"
        approach: "Spawn analyzer agent with specific scope"
        
      - pattern: "Multi-file Changes"
        approach: "Use parallel agents for independent files"
        
      - pattern: "Research Tasks"
        approach: "Delegate to research-focused sub-agent"

  code_quality:
    principles:
      - "Prefer clarity over cleverness"
      - "Follow existing project conventions"
      - "Write self-documenting code"
      - "Keep functions small and focused"
    
    validation:
      - "Use project's linting configuration"
      - "Run tests before considering task complete"
      - "Ensure backwards compatibility"

  session_management:
    efficiency:
      - "Use Claude Code's /compact for conversation compression"
      - "Clear context with /clear when switching tasks"
      - "Leverage sub-agents to avoid token overflow"
      - "Focus on one task at a time"

  essential_tools:
    mcp_servers:
      - name: "Context7"
        purpose: "Library documentation lookup"
        when: "Working with external libraries or frameworks"
      
      - name: "magic-mcp"
        purpose: "Frontend development assistance"
        when: "Building UI components (optional)"
    
    claude_code_commands:
      - "/compact - Compress conversation history"
      - "/clear - Clear context for new task"
      - "/undo - Revert last changes"

  error_handling:
    approach:
      - "Fail fast with clear error messages"
      - "Provide actionable solutions"
      - "Learn from errors to prevent recurrence"
      - "Use minimal reproducible examples for debugging"

  git_conventions:
    strategy: "Detect and follow existing project conventions"
    fallback: "Use conventional commits if no clear pattern exists"
    principles:
      - "Small, focused commits"
      - "Clear, descriptive messages"
      - "Reference issues when applicable"